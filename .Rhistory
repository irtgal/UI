md <- read.table(file="movies.txt", sep=",", header=TRUE)
md
head(md)
clear
cls
clear
md
head(md)
summary(md)
str(md)
dim(md)
nrow(md)
ncolumn(md)
ncol(md)
summary(md)
table(md$mpaa)
table(md$title)
names(md)
summary(md)
# Sedaj so nominalni atributi predstavljeni kot faktorji
summary(md)
summary(md)
# Prenesite datoteki "movies.txt" in "players.txt" v lokalno mapo. To mapo nastavite kot delovno
# mapo okolja R. To lahko naredite s pomocjo ukaza "setwd" oziroma iz menuja
# s klikom na File -> Change dir...
#
# na primer:
setwd("C:\Users\Gal\Documents\FRI\UI")
# Branje podatkov iz tekstovne datoteke
# (header=T oznacuje, da datoteka vsebuje vrstico z imeni atributov (stolpcev v podatkovnem okvirju)
#  sep="," doloca, da je znak "," uporabljen kot locilo med vrednostmi v datoteki)
md <- read.table(file="movies.txt", sep=",", header=TRUE)
# Opis delovanja funkcije, seznam argumentov klica in primer uporabe dobimo tako, da za znakom "?" vnesemo ime funkcije
?read.table
# nekaj uporabnih funkcij
head(md)
summary(md)
str(md)
names(md)
table(md$mpaa)
# prazen string zamenjamo z oznako "UNK"
md$mpaa[md$mpaa == ""] <- "UNK"
cls
exit
md$mpaa <- as.factor(md$mpaa)
# Za faktorizacijo teh stolpcev lahko uporabimo zanko "for"
for (i in 18:24)
md[,i] <- as.factor(md[,i])
# Sedaj so nominalni atributi predstavljeni kot faktorji
summary(md)
# Primeri naslavljanja podatkov
md[30,]
md&rating
md$rating
mean(md$rating)
mean(md$rating)tm[ ]
tmp <- md$rating > mean(md$rating)
tmp
tmp
table(tmp)
hist(md$rating)
boxplot(md$rating)
obline(md$rating)
outline(md$rating)
abline(md$rating)
pie(md$rating)
pie(md$comedy)
pie(table(md$Comedy))
table(md$Comedy)
tmp
clear
cls
sda
sdad
table(md$Comedy, md$year)
!!
head
head(table(md$Comedy))
table(md$Comedy, md$year)
drama <- md$Drama == "1"
drama
;drama
drama
table(drama)
mean;))
md$rating[drama]
mean(md$rating[drama])
mean(md$rating[!drama])
boxplot(rating ~ Drama, data=md, names=c("Ostale zvrsti", "Drame"), ylab="Ocena filma", main="Primerjava ocen filmov med dramami in ostalimi zvrstmi")
# Izberimo romanticne komedije
selRomCom <- md$Comedy == "1" & md$Romance == "1"
ratingRC <- md$rating[selRomCom]
mean(ratingRC)
# Izberimo akcijske komedije
selActCom <- md$Comedy == "1" & md$Action == "1"
mean(ratingAC)
boxplot(ratingRC, ratingAC, names=c("Romanticne kom.", "Akcijske kom."))
clear
summary(md$budget)
is.na(md$budget)
which(is.na(md$budget))
table(is.na(md$budget))
table(md$budget == 'NA')
table(md$budget == 'NA')
table(md$budget == 'NAR')
table(md$budget == 'NAR')
table(is.na(md$budget))
sel <- is.na(md$budget)
sel
mdsub <- md[!sel,]
mdsub
head(mdsel)
head(mdsub)
head(md)
nrow(mdsub)
summary(mdsub)
plot(mdsub$budget, mdsub$rating, xlab="Proracun v $", ylab="Ocena", main="Ocena filma v odvisnosti od proracuna")
cor (mdsub$budget, mdsub$rating)
ratio <- mdsub$budget/mdsub$rating
ratio
mean(ratio)
for (y in 1970:2000) {y}
# Prenesite datoteki "movies.txt" in "players.txt" v lokalno mapo. To mapo nastavite kot delovno
# mapo okolja R. To lahko naredite s pomocjo ukaza "setwd" oziroma iz menuja
# s klikom na File -> Change dir...
#
# na primer:
setwd("C:\Users\Gal\Documents\FRI\UI")
# Branje podatkov iz tekstovne datoteke
# (header=T oznacuje, da datoteka vsebuje vrstico z imeni atributov (stolpcev v podatkovnem okvirju)
#  sep="," doloca, da je znak "," uporabljen kot locilo med vrednostmi v datoteki)
md <- read.table(file="movies.txt", sep=",", header=TRUE)
# Opis delovanja funkcije, seznam argumentov klica in primer uporabe dobimo tako, da za znakom "?" vnesemo ime funkcije
?read.table
# nekaj uporabnih funkcij
head(md)
summary(md)
str(md)
names(md)
table(md$mpaa)
# prazen string zamenjamo z oznako "UNK"
md$mpaa[md$mpaa == ""] <- "UNK"
md$mpaa <- as.factor(md$mpaa)
# Za faktorizacijo teh stolpcev lahko uporabimo zanko "for"
for (i in 18:24)
md[,i] <- as.factor(md[,i])
# Sedaj so nominalni atributi predstavljeni kot faktorji
summary(md)
# Primeri naslavljanja podatkov
md[30,]
md[30,3]
md[30,"length"]
md[,3]
md$length
# Uporabne funkcije pri vizualizaciji podatkov
plot(md$votes)
hist(md$rating)
boxplot(md$rating)
barplot(table(md$Drama))
pie(table(md$mpaa))
# z ukazom table() dobimo frekvenco posameznih vrednosti v vektorju
table(md$Comedy)
# delez komedij lahko graficno prikazemo
barplot(table(md$Comedy))
pie(table(md$Comedy))
tab <- table(md$Comedy)
names(tab) <- c("Ostale zvrsti", "Komedije")
tab
sum(tab)
barplot(tab, ylab="Stevilo filmov", main="Razmerje med komedijami in ostalimi zvrsti filmov")
barplot(tab / sum(tab) * 100, ylab="Delez filmov v %", main="Delez komedij med ostalimi zvrstmi filmov")
pie(tab, main = "Delez komedij med ostalimi zvrstmi filmov")
# Izrisimo histogram ocen za komedije
hist(md[md$Comedy == "1", "rating"], xlab="Ocena filma", ylab="Frekvenca", main="Histogram ocen komedij")
# Boxplot ocen komedij
boxplot(md[md$Comedy == "1", "rating"], ylab="Ocena filma", main="Ocene komedij")
summary(md$rating[md$Comedy == 1])
# Izberimo drame
drama <- md$Drama == "1"
# Izracunajmo povprecno oceno dram
mean(md[drama,"rating"])
# Izracunajmo povprecno oceno ostalih filmov
mean(md[!drama,"rating"])
# Izrisimo boxplot diagram ocen za razlicne vrednosti atributa Drama
boxplot(rating ~ Drama, data=md)
boxplot(rating ~ Drama, data=md, names=c("Ostale zvrsti", "Drame"), ylab="Ocena filma", main="Primerjava ocen filmov med dramami in ostalimi zvrstmi")
# Izberimo romanticne komedije
selRomCom <- md$Comedy == "1" & md$Romance == "1"
ratingRC <- md$rating[selRomCom]
mean(ratingRC)
# Izberimo akcijske komedije
selActCom <- md$Comedy == "1" & md$Action == "1"
ratingAC <- md$rating[selActCom]
mean(ratingAC)
boxplot(ratingRC, ratingAC, names=c("Romanticne kom.", "Akcijske kom."))
sel <- md$year >= 1960
# ukaz table() lahko uporabimo za stetje frekvenc parov vrednosti
table(md$Comedy[sel], md$year[sel])
tab <- table(md$Comedy[sel], md$year[sel])
tab
tab[2,]
# prestejmo vse filme po izbranih letih
table(md$year[sel])
tabAll <- table(md$year[sel])
tab[2,]/tabAll
ratio <- tab[2,]/tabAll
barplot(ratio, xlab="Leto", ylab="Relativna frekvenca", main="Relativna frekvenca komedij po letih")
plot(x=names(ratio), y=as.vector(ratio), type="l", xlab="Leto", ylab="Relativna frekvenca komedij", main="Gibanje deleza komedij med filmi po letih")
# povprecna ocena
mean(md$rating)
# koliko je filmov z nadpovprecno oceno?
tab <- table(md$rating > mean(md$rating))
tab
names(tab) <- c("podpovprecno ocenjeni", "nadpovprecno ocenjeni")
barplot(tab, ylab="Stevilo filmov", main="Razmerje med podpovprecno in nadpovprecno ocenjenimi filmi")
pie(tab, main="Razmerje med podpovprecno in nadpovprecno ocenjenimi filmi")
# Boxplot diagram podaja vpogled v porazdelitev vrednosti atributa
boxplot(md$rating, ylab="Ocena filma", main="Boxplot ocen filmov")
# Izrisimo se povprecno vrednost atributa
abline(h=mean(md$rating))
# vecina filmov nima podatka o proracunu (vrednost NA)
summary(md$budget)
is.na(md$budget)
table(is.na(md$budget))
which(is.na(md$budget))
# izberimo samo tiste vrstice, ki vsebujejo podatek o proracunu filma
sel <- is.na(md$budget)
mdsub <- md[!sel,]
nrow(mdsub)
summary(mdsub$budget)
plot(mdsub$budget, mdsub$rating, xlab="Proracun v $", ylab="Ocena", main="Ocena filma v odvisnosti od proracuna")
# poglejmo korelacijski koeficient med proracunom in oceno filma
cor(mdsub$budget, mdsub$rating)
cor.test(mdsub$budget, mdsub$rating)
# Izracunajmo izkoristek proracuna na dobljeno oceno
ratio <- mdsub$budget/mdsub$rating
# Ali so filmi "ekonomicni"?
hist(ratio)
# Kateri film ima najslabsi izkoristek (najvec porabljenega denarja za dobljeno oceno)?
mdsub[which.max(ratio),]
disbudget <- cut(mdsub$budget, c(0, 1000000, 50000000, 500000000), labels=c("nizek", "srednji", "visok"))
barplot(table(disbudget)/length(disbudget), xlab="Proracun filma", ylab="Relativna frekvenca", main="Delez filmov glede na visino proracuna")
# Izrisimo boxplot dobljenih ocen glede na proracun filma
boxplot(mdsub$rating ~ disbudget, xlab="Proracun filma", ylab="Ocena filma", main="Boxplot ocen filmov glede na visino proracuna")
# Izberimo filme, ki imajo podatek o proracunu
sel <- !is.na(md$budget) & md$year >= 1990 & md$year <= 2000
sum.budget <- aggregate(as.double(budget) ~ year, data = md[sel,], sum)
sum.budget
plot(sum.budget, type="l", xlab="Leto", ylab="Vrednost v $", main="Kumulativna vrednost proracunov filmov po letih")
avg.budget <- aggregate(as.double(budget) ~ year, data = md[sel,], mean)
avg.budget
plot(avg.budget, type="l", xlab="Leto", ylab="Vrednost v $", main="Povprecna vrednost proracunov filmov po letih")
# Branje podatkov iz tekstovne datoteke
players <- read.table("players.txt", sep=",", header = T)
summary(players)
# Ustvarimo prazen vektor
h <- vector()
# Uporabimo zanko za sprehod cez leta v obdobju 1970-2000
for (y in 1970:2000)
{
# Izberemo igralce, ki so bili aktivni v opazovanem letu
sel <- players$firstseason <= y & players$lastseason >= y
# Povprecno visino aktivnih igralcev dodamo na konec vektorja
h <- c(h, mean(players$height[sel]))
}
# Izrisemo zbrane podatke o povprecni visini igralcev (uporabimo type="l" za izris crt)
plot(1970:2000, h, type="l", xlab="Leto", ylab="Visina v cm", main="Gibanje povprecne visine igralcev v ligi NBA po letih")
# Nalozimo ucno mnozico
census <- read.table("census.txt", header = T, sep = ",", stringsAsFactors = T)
# Povzetek o atributih v podatkovni mnozici
summary(census)
head(census)
header(census)
head(census)
nrow(census)
test <- census[-sel,]
nrow(train)
table(train$income)
nrow(test)
table(test$income)
table(test$income)
table(test$income)
table(test$income)
table(test$income)
table(test$income)
table(test$income)
table(test$income)
table(test$income)
table(test$income)
#
# Nalozimo ucno mnozico
census <- read.table("census.txt", header = T, sep = ",", stringsAsFactors = T)
# Povzetek o atributih v podatkovni mnozici
summary(census)
# Koliko je ucnih primerov?
nrow(census)
# Ukaz set.seed nastavi generator nakljucnih stevil.
# Uporabimo ga takrat, ko zelimo ponovljivo sekvenco generiranih stevil.
set.seed(0)
sel <- sample(1:nrow(census), size=as.integer(nrow(census) * 0.7), replace=F)
#####################################################################################################
#
######################################################################################################
#
######################################################################################################
#
# Na podlagi podatkovne mnozice "movies.txt" zgradite model za
######################################################################################################
#
# Na podlagi podatkovne mnozice "movies.txt" zgradite model za
# napovedovanje, ali je dolocen film komedija ali ne.
sum(diag(tab)) / sum(tab)
# Lahko napisemo funkcijo za izracun klasifikacijske tocnosti
CA <- function(obs, pred)
{
tab <- table(obs, pred)
sum(diag(tab)) / sum(tab)
}
# Klic funkcije za klasifikacijsko tocnost...
CA(observed, predicted)
# Klasifikacijsko tocnost lahko izracunamo tudi tako...
q <- observed == predicted
mean(q)
# Nalozimo ucno mnozico
census <- read.table("census.txt", header = T, sep = ",", stringsAsFactors = T)
# Povzetek o atributih v podatkovni mnozici
summary(census)
# Koliko je ucnih primerov?
nrow(census)
# Ukaz set.seed nastavi generator nakljucnih stevil.
# Uporabimo ga takrat, ko zelimo ponovljivo sekvenco generiranih stevil.
set.seed(0)
sel <- sample(1:nrow(census), size=as.integer(nrow(census) * 0.7), replace=F)
train <- census[sel,]
test <- census[-sel,]
nrow(train)
table(train$income)
nrow(test)
table(test$income)
# poglejmo pogostost posameznih razredov
table(train$income)
sum(test$income == "Small") / length(test$income)
# Za gradnjo odlocitvenih dreves potrebujemo funkcijo iz knjiznice "rpart".
# Nalozimo jo
library(rpart)
# Zgradimo odlocitveno drevo
dt <- rpart(income ~ ., data = train)
library(rpart.plot)
rpart.plot(dt)
# Prave vrednosti testnih primerov
observed <- test$income
head(observed)
predicted <- predict(dt, test, type = "class")
head(predicted)
# Zgradimo tabelo napacnih klasifikacij
tab <- table(observed, predicted)
tab
sum(diag(tab)) / sum(tab)
# Lahko napisemo funkcijo za izracun klasifikacijske tocnosti
CA <- function(obs, pred)
{
tab <- table(obs, pred)
sum(diag(tab)) / sum(tab)
}
# Klic funkcije za klasifikacijsko tocnost...
CA(observed, predicted)
# Klasifikacijsko tocnost lahko izracunamo tudi tako...
q <- observed == predicted
mean(q)
# Funkcija za izracun senzitivnosti modela
Sensitivity <- function(obs, pred, pos.class)
{
tab <- table(obs, pred)
tab[pos.class, pos.class] / sum(tab[pos.class,])
}
# Funkcija za izracun specificnosti modela
Specificity <- function(obs, pred, pos.class)
{
tab <- table(obs, pred)
neg.class <- which(row.names(tab) != pos.class)
tab[neg.class, neg.class] / sum(tab[neg.class,])
}
# Funkcija za izracun preciznosti modela
Precision <- function(obs, pred, pos.class)
{
tab <- table(obs, pred)
tab[pos.class, pos.class] / sum(tab[, pos.class])
}
table(observed, predicted)
nrow(train)
table(train$income)
nrow(test)
table(test$income)
# poglejmo pogostost posameznih razredov
table(train$income)
sum(test$income == "Small") / length(test$income)
# Za gradnjo odlocitvenih dreves potrebujemo funkcijo iz knjiznice "rpart".
# Nalozimo jo
library(rpart)
# Zgradimo odlocitveno drevo
dt <- rpart(income ~ ., data = train)
# Zgradimo odlocitveno drevo
dt <- rpart(income ~ ., data = train)
library(rpart.plot)
rpart.plot(dt)
# Prave vrednosti testnih primerov
observed <- test$income
head(observed)
predicted <- predict(dt, test, type = "class")
head(predicted)
# Zgradimo tabelo napacnih klasifikacij
tab <- table(observed, predicted)
test <- data[-sel,]
library(rpart)
library(rpart.plot)
data <- read.table("insurance.txt", sep=",", header=T, stringsAsFactors=T)
summary(data)
nrow(data)
set.seed(0)
sel <- sample(1:nrow(data), as.integer(nrow(data) * 0.7), replace=F)
sel
sel <- sample(1:nrow(data), as.integer(nrow(data) * 0.7), replace=F)
train <- data[sel,]
test <- data[-sel,]
train
test
head(test)
rpart.plot(dt)
nrow(data)
set.seed(0)
sel <- sample(1:nrow(data), as.integer(nrow(data) * 0.7), replace=F)
train <- data[sel,]
test <- data[-sel,]
test
haed(test)
head(test)
library(rpart)
library(rpart.plot)
dt <- rpart(insurance ~ ., train)
rpart.plot(dt)
observed <- test$insurance
observed
predicted
predicted <- predict(dt, test, type="class")
predicted
q <- observed == predicted
q
sum(q)/length(q)
nrow(test)
nrow(train)
